import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import Navbar from '../components/Navbar.tsx'
import Feed from './Feed.tsx'

import globals from '../styles/globals.css'
import dashboardcss from '../styles/dashboard.css'
import navbarcss from '../styles/navbar.css'
import { useRouter } from 'next/router'

import 'bootstrap/dist/css/bootstrap.css'
// import the function from test.tsx
import { useEffect, useState } from 'react'
import { ethers } from 'ethers'
import { apolloClient } from './client/ApolloClient';
import { gql } from '@apollo/client'

// const router = useRouter()

const Home: NextPage = () => {

  const [provider, setProvider] = useState<ethers.providers.Web3Provider>()
  const [signer, setSigner] = useState<ethers.providers.JsonRpcSigner>()
  const [address, setAddress] = useState<string>()
  const [signature, setSignature] = useState<string>()

  const challengeQuery = `query($request: ChallengeRequest!) {
    challenge(request: $request) {
          text
      }
    }
  `  

  const authenticateQuery = `mutation($request: SignedAuthChallenge!) {
    authenticate(request: $request) {
          accessToken
          refreshToken
      }
    }
  `

  useEffect(() => {
    if (typeof window.ethereum !== 'undefined' || (typeof window.web3 !== 'undefined')) {
      const provider = new ethers.providers.Web3Provider(window.ethereum)
      setProvider(provider)
      const signer = provider.getSigner()
      setSigner(signer)
      // other stuff using provider here
    }
  }, []);

  const connectWallet = async () => {
    try {
      await window.ethereum.request({ method: 'eth_requestAccounts' })
      signer?.getAddress().then((address) => {
        setAddress(address)
      })
    } catch (error) {
      console.log(error)
    }
  }

  const signMessage = async (message: string) => {
    try {
      const signature = await signer?.signMessage(message)
      return signature
    } catch (error) {
      return error
    }
  };

  const getMessage = async () => {
    const response = await apolloClient.query({
      query: gql(challengeQuery),
      variables: {
        request: {
            address: address
        },
      },
    })
    console.log(response.data.challenge.text)
    const signature = await signMessage(response.data.challenge.text)
    console.log('Signature: ', signature)
    setSignature(signature?.toString())
  }

  const authenticate = async () => {
    try {
      const response = await apolloClient.mutate({
        mutation: gql(authenticateQuery),
        variables: {
          request: {
              address: address,
              signature: signature
          },
        },
      })
      console.log(response.data.authenticate.text)
    } catch (error) {
      console.log(error)
    }
  }

  return (
    <div>
      <Head>
        <title>FreeLensers</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar />
      <main>
        <Feed />
        <div>
          {/* Create button to call function from test.tsx */}
          <button onClick={connectWallet}>Connect Wallet</button>
          <button onClick={getMessage}>Get Message</button>
          <button onClick={authenticate}>Authenticate</button>
         </div>
      <footer>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home
